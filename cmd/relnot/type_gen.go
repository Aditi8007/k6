// Code generated by "enumer -type=PullType -text -transform=kebab -output type_gen.go"; DO NOT EDIT.

package main

import (
	"fmt"
)

const _PullTypeName = "undefinedepic-featurefeatureepic-breakingbreakinguxinternalbug"

var _PullTypeIndex = [...]uint8{0, 9, 21, 28, 41, 49, 51, 59, 62}

func (i PullType) String() string {
	if i < 0 || i >= PullType(len(_PullTypeIndex)-1) {
		return fmt.Sprintf("PullType(%d)", i)
	}
	return _PullTypeName[_PullTypeIndex[i]:_PullTypeIndex[i+1]]
}

var _PullTypeValues = []PullType{0, 1, 2, 3, 4, 5, 6, 7}

var _PullTypeNameToValueMap = map[string]PullType{
	_PullTypeName[0:9]:   0,
	_PullTypeName[9:21]:  1,
	_PullTypeName[21:28]: 2,
	_PullTypeName[28:41]: 3,
	_PullTypeName[41:49]: 4,
	_PullTypeName[49:51]: 5,
	_PullTypeName[51:59]: 6,
	_PullTypeName[59:62]: 7,
}

// PullTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PullTypeString(s string) (PullType, error) {
	if val, ok := _PullTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PullType values", s)
}

// PullTypeValues returns all values of the enum
func PullTypeValues() []PullType {
	return _PullTypeValues
}

// IsAPullType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PullType) IsAPullType() bool {
	for _, v := range _PullTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for PullType
func (i PullType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for PullType
func (i *PullType) UnmarshalText(text []byte) error {
	var err error
	*i, err = PullTypeString(string(text))
	return err
}
